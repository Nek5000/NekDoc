.. _conjht:

-------------------------
Conjugate Heat Transfer
-------------------------

In this tutorial, we want to simulate a simple 2D Rayleigh-Benard convection (RBC) flow using Nek5000's conjugate heat transfer capability. 
The conjugate heat transfer capability solves the energy equation across both solid and liquid subdomains.
in the case of RBC, this provides a continuous temperature profile through horizontal walls of finite thickness.
The modeled case corresponds to a simplified version of simulations performed by Foroozhani et al. [Foroozani2021]_.

If you are not familiar with Nek5000, we strongly recommend that you begin with the :ref:`periodic hill <perhill>` example first! 
Similarly, we start by generating a 2D mesh, and modify the case files for this instance afterwards and finally run the case.

..........................
Pre-processing
..........................
Users must always bear in mind, when setting up a test case in Nek5000, case files will need to be edited. 
Some samples can be found in the ``Nek5000/examples`` directory included with the release version, as well as a blank template for the ``.usr`` file located in ``Nek5000/core`` directory.
As a first step, the user should create a case directory in the corresponding run directory:

.. code-block:: none

   cd $HOME/Nek5000/run 
   mkdir conj_ht
   cd conj_ht

then copy the templates to your case directory. 
This tutorial requires the ``ray0.rea`` file from the Rayleigh-Bernard example found in ``Nek5000/examples/rayleigh``.

We begin by creating the mesh with appropriate bounday conditions and then we need to set the parameters and case files. 

..........................
Mesh generation
..........................

This tutorial requires that you have the tools ``genbox``, ``genmap``, ``prenek``, and ``nekmerge`` compiled. 
Note that ``prenek`` and ``nekmerge`` both require the use of a xterminal.
Make sure the tools directory (typically ``Nek5000/bin``) is in your environment PATH. 
First, we create the mesh for the fluid part by the following input file (called *cht2d.box*) to ``genbox``.
In Nek5000, it is important to understand that there are two types of mesh topology: the "*v mesh*" for the velocity and the "*t mesh*" for the temperature and passive scalars.
The *v mesh* (fluid subdomain) is always a subset of the *t mesh* and the global element ID numbers of the *v mesh* must preceed those of the *t mesh*.
Therefore, we generate a *v mesh* and *t mesh* with appropriate BCs separately and later merge both subdomains using the ``nekmerge`` tool.
This ensures the proper element ordering.

The fluid mesh is generated by ``genbox`` with the following input file:

.. code-block:: none

   ray0.rea
   2        spatial dimension
   2        number of fields
   #========================================================
   #
   #    Example of 2D  .box file for fluid. This gives 2 x 1 
   #    box with 20 x 10 elements
   #
   #    If nelx (y or z) < 0, then genbox automatically generates the
   #    grid spacing in the x (y or z) direction
   #    with a geometric ratio given by "ratio". 
   #    ( ratio=1 implies uniform spacing )
   #
   #========================================================
   #
   Box
   -20     -10            nelx,nely,nelz for Box)
   0      2     1      x0 x1 ratio
   0      1     1      y0 y1 ratio
   W  ,W  ,W  ,W  ,    V bc's  ! NB:  3 characters each !
   I  ,I  ,E  ,E  ,    T bc's  !      You must have 2 spaces!
   
It is worth mentioning that since we are running a 2D case, the input file named *ray0.rea* should be a 2D file, not a 3D file. In this example, the elements are distributed uniformly in stream-wise (x) and span-wise (y) directions. The thermal boundary conditions for the upper and lower face must be "\E" which indicates that the *Interior boundary*-- this condition is mandatory for the interface between the fluid and solid domains. The lateral surfaces of the inner domain and solid walls are assumed to be adiabatic.

When you run ``genbox``, the tool will produce the binary mesh and boundary data file named ``box.rea`` which should be renamed to ``boxfluid.rea``. 

In the next step, we create two upper and lower solid parts of finite thickness h=0.2. The lower domain spans :math:`y \in [-0.2,0]` and the upper domain spans :math:`y \in [1,1.2]`.

**Note:** It is important to keep the *number of elements equal in spanwise direction* for different parts. 

The lower solid domain is generated by ``genbox`` with the following input file:

.. code-block:: none

   ray0.rea
   2        spatial dimension
   2        number of fields
   #========================================================
   #
   #    This gives a 2 x 1 box with 20 x 5 elements
   #    here used for Rayleigh Benard convection.
   #
   #    Note that number of fields < 0 implies that box.rea
   #    will be ascii.
   #
   #========================================================
   #
   Box
   -20    -5            nelx,nely,nelz for Box)
   0      2     1      x0 x1 ratio
   -0.2      0     1      y0 y1 ratio
   W  ,W  ,W  ,W  ,    V bc's  ! NB:  3 characters each !
   I  ,I  ,t  ,E  ,    T bc's  !      You must have 2 spaces!!
   
The tool will produce the binary mesh with boundary data file named ``box.rea`` which should be renamed to ``boxlower.rea``. The upper solid mesh is also generated by genbox with the following input file:

.. code-block:: none

   ray0.rea
   2        spatial dimension
   2        number of fields
   #========================================================
   #
   #    This gives a 9 x 1 box, periodic in x,
   #    here used for Rayleigh Benard convection.
   #
   #    Note that number of fields < 0 implies that box.rea
   #    will be ascii.
   #
   #========================================================
   #
   Box
   -20    -5            nelx,nely,nelz for Box)
   0      2     1      x0 x1 ratio
   1      1.2     1      y0 y1 ratio
   W  ,W  ,W  ,W  ,    V bc's  ! NB:  3 characters each !
   I  ,I  ,E  ,t  ,    T bc's  !      You must have 2 spaces!!

The tool will produce the binary mesh with boundary data file named ``box.rea`` which should be renamed to ``boxupper.rea``. 

In ``nek5000/tools``, there is a code ``nekmerge.f`` that can be compiled with your local Fortran compiler (preferably not g77). By running this code, you can merge upper and lower solid subdomain into one. Below is a typical session, upon typing ``nekmerge`` the user is prompted at the command line:

.. code-block:: none

   ascii or binary output ? (a/b):
     a
   Input new (output) file name:
     box_solids
   Input source .rea file name or press enter to continue:
     boxlower
   Opening input file: boxlower
   Input source .rea file name or press enter to continue:
     boxupper
  

Then, we can run the ``pretex`` tool to merge fluid subdomain with the solid resulting. It is important to first enter the fluid domain file name and then the solid part. Example of running ``pretex`` tool is shown below:

.. code-block:: none

 Choose a Name for This Session:
 cht2d
   Beginning Session cht2d
   1 READ PREVIOUS PARAMETERS 
   2 TYPE IN  NEW  PARAMETERS 
   3 CONJ. HEAT TRANSFER MERGE
 Choose item:
   3
   3
 Enter name of fluid session
   boxfluid
 Enter name of the solid session
   box_solids
 Exiting session 

Now, the user needs to run ``reatore2`` and ``genmap`` tools in order to produce ``cht2d.re2`` and ``cht2d.ma2`` binary files respectively.

.. _fig:cht_mesh:

.. figure:: mesh.png
    :align: center
    :figclass: align-center
    :alt: per_mesh

    Modified box mesh graded

..........................
usr file
..........................

The :ref:`user routines <case_files_usr>` file implements various subroutines to allow the users to interact with the solver.

To get started we copy the template to our case directory and then we modify its subroutines accordingly.

.. code-block:: none

   cp $HOME/Nek5000/core/zero.usr cht2d.usr 

**Note:** in the :ref:`uservp subroutine <case_files_uservp>`, users can specifiy different variable properties for the fluid and solid subdomains independently. 
As an example, thermal diffusivity of Copper is :math:`\lambda = 1.1 (10 ^ {-4})` [:math:`m^{2}/s`]. 
The thermal diffusivity ratio of Copper and liquid metal alloy GaInSn (Pr = 0.033) is 10 and the thermal diffusivity ratio of Copper and air (Pr = 0.7) is 5.2 [Foroozani2021]_.

.. code-block:: none

      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      if (ifield.eq.1) then
         utrans  = param(1)
         udiff   = param(2)

      else

         utrans  = param(7)        ! thermal properties
         udiff   = param(8)

         if (ieg .gt. nelgv) then   ! properties in the solid
            udiff   = 10.0*param(8) ! conductivity Solid/Fluid
            utrans  = 1.0
         endif

      endif

      return
      end
       
Initial & boundary conditions
_____________________________

In this study, the volumetric heat source is set to be zero *qvol=0* in *t mesh* which can be done in ``userq`` subroutine. The next step is to specify the initial and boundary conditions. We apply a linear variation of temperature in fluid mesh in *y*-direction where the lower plate is heated and the upper one is cooled, uniformly. Subsequently, we modify ``userf``, ``userbc`` and ``useric`` as:

.. code-block:: fortran

     subroutine userf  (ix,iy,iz,ieg)
     include 'SIZE'
     include 'TOTAL'
     include 'NEKUSE'

      ffx = 0.0
      ffy = temp
      ffz = 0.0

      return
      end

...
In this RBC example :math:`Ra = 10 ^ {7}` and :math:`Pr= 0.033` are choosen. 
The equilibrium state of pure conductive heat transfer as the initial condition takes the form ``T = 1 - y`` for  ``0 < y < 1``  in fluid domain and :math:`T \approx 1` and :math:`\approx 0` at the fluid-solid boundaries. 
It should be mentioned that the *temperature drop* across both solid-plates varies with *Pr* and *Ra* and it should be adjusted at the boundaries with temperature increment :math:`\delta T`. One can apply temperature increment of :math:`\delta T = 2.5` (set in the ``USERDEF.f`` file) at the top of the upper plate and the bottom of the lower plate for *Pr = 0.033* and :math:`\delta T = 4.72` for *Pr = 0.7* as depicted in :numref:`fig:deltaT2`.

.. _fig:deltaT2:

.. figure:: deltaT2.png
    :align: center
    :figclass: align-center
    :alt: per_flow
    
    Mean dimensionless temperature profiles in the CHT setting. Temprerature variation in solid-fluid domain is shown here. 

Therefore temperature equation across the whole domain ``[-0.2,1.2]`` is ``T(y) = -4.303*y + 2.651``. 

.. code-block:: fortran

      subroutine userbc (ix,iy,iz,iside,ieg)

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'USERDEF.f'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      !if deltaT=2.512, tempereture equation is 
      temp = -4.303*y + 2.651   
      
      ! bottom plate
      if(y.le.0) then
       temp = 1.0 - (y/hs)*(deltaT)
      end if
      ! top plate
      if(y.ge.1) then
       temp= ((1.0 - y)/(hs))*(deltaT)
      end if

      return
      end

.. code-block:: fortran

      subroutine useric(ix,iy,iz,ieg)
      
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      include 'USERDEF.f'

      ux   = 0.0
      uy   = 0.0
      uz   = 0.0

      temp = 1.0 - y

      if (y.le.0.0) then 
       temp = 1.0 - (y/hs)*(deltaT)
      else if (y.ge.1.0) then 
       temp=((1.0 - y)/(hs))*(deltaT)
      end if

      return
      end

..........................
Control parameters
..........................

The control parameters for any case are given in the ``.par`` file.
For this case, using any text editor, create a new file called ``cht2d.par`` and type in the following:

.. code-block:: ini

     #--------------------
     # nek parameter file
     #--------------------

    [GENERAL]
    numSteps          = 8000
    stopAt            = numSteps
    dt                = 5e-02
    variableDT        = yes
    targetCFL         = 0.5
    writeInterval     = 500
    writeControl      = timeStep
    timeStepper       = bdf2

    [PROBLEMTYPE]
    equation = incompNS

    [PRESSURE]
    residualTol = 1e-04
    residualProj = no

    [VELOCITY]
    residualTol = 1e-06
    density = 1.0
    # Ra=1e7, Pr=0.033, viscosity=sqrt(Pr/Ra)
    viscosity = 5.744563E-05

    [TEMPERATURE] 

    conjugateHeatTransfer = yes

    rhoCp = 1.0
    # conductivity=1/sqrt(RaPr) 
    conductivity = 1.740776E-03
    residualTol = 1e-06

In this example, we have set the calculation to stop after 8000-time steps (``numSteps=8000``) and print the checkpoint file every 500-time steps (``writeInterval=500``). In choosing ``viscosity=5.744563E-05`` and ``conductivity=1.740776E-03``, actually we are setting the Rayleigh *Ra=10e7* and *Pr=0.033*. 


..........................
SIZE file 
..........................

The static memory layout of Nek5000 requires the user to set some solver parameters through a so called ``SIZE`` file.
Typically it's a good idea to start from our template.
Copy the ``SIZE.template`` file from the core directory and rename it ``SIZE`` in the working directory:

.. code-block:: none

   cp $HOME/Nek5000/core/SIZE.template SIZE

Then, adjust the following parameters in the BASIC section  

.. code-block:: fortran

      ...    
 
      ! BASIC
      parameter (ldim=2)
      parameter (lx1=8)
      parameter (lxd=12)
      parameter (lx2=lx1)
                                     
      parameter (lelg=400)
      parameter (lpmin=1)
      parameter (lpmax=512)
      parameter (ldimt=1)

      ...
      
For this tutorial we have set our polynomial order to be :math:`N=7` - this is defined in the ``SIZE`` file above as ``lx1=8`` which indices that there are 8 points in each spatial dimension of every element.
Additional details on the parameters in the ``SIZE`` file are given :ref:`here <case_files_SIZE>`.  

..........................
Compilation 
..........................

With the ``hillp.usr``, and ``SIZE`` files created, we are now ready to compile::  

  makenek cht2d

If all works properly, upon compilation the executable ``nek5000`` will be generated.

Now you are all set, just run

.. code-block:: bash

  nekbmpi cht2d 4

to launch an MPI jobs on your local machine using 4 ranks. The output will be redirected to ``logfile``.

...........................
Post-processing the results
...........................

Once execution is completed your directory should now contain multiple checkpoint files that look like this::

  cht2d.f00001
  cht2d.f00002
  ...

The preferred mode for data visualization and analysis with Nek5000 is
to use Visit/Paraview. One can use the script *visnek*, to be found in ``/scripts``. It is sufficent to run:: 

  visnek cht2d

*(or the name of your session)* to obatain a file named ``cht2d.nek5000`` which can be recognized in Visit/Paraview.

In the viewing window, one can visualize the temperature-field as depicted in

:numref:`fig:cht_rbc`.

.. _fig:cht_rbc:

.. figure:: cht_rbc.png
    :align: center
    :figclass: align-center
    :alt: per_flow

    Steady-State flow field visualized in Visit/Paraview. Vectors represent velocity. Colors represent velocity magnitude.  


